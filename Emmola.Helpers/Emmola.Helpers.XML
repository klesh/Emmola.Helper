<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emmola.Helpers</name>
    </assembly>
    <members>
        <member name="T:Emmola.Helpers.Classes.Ordered`1">
            <summary>
            To hold object with Order index
            </summary>
        </member>
        <member name="M:Emmola.Helpers.Classes.Ordered`1.CompareTo(Emmola.Helpers.Classes.Ordered{`0})">
            <summary>
            compare
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Emmola.Helpers.Classes.Ordered`1.Value">
            <summary>
            Object to hold
            </summary>
        </member>
        <member name="P:Emmola.Helpers.Classes.Ordered`1.Order">
            <summary>
            Order index
            </summary>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToDateString(System.DateTime)">
            <summary>
            Return a Date string, set DateTimeHelper.DATE_FORMAT to change output format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToTimeString(System.DateTime)">
            <summary>
            Return a Date string, set DateTimeHelper.DATE_FORMAT to change output format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToDateTimeString(System.DateTime)">
            <summary>
            Return a Date And Time string, set DateTimeHelper.DATETIME_FORMAT to change output format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            Return a Date string, set DateTimeHelper.DATE_FORMAT to change output format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            Return a Date string, set DateTimeHelper.DATE_FORMAT to change output format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToDateTimeString(System.Nullable{System.DateTime})">
            <summary>
            Return a Date And Time string, set DateTimeHelper.DATETIME_FORMAT to change output format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToReadable(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Return a readable timespan to DateTime.Now if not null.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToReadable(System.TimeSpan)">
            <summary>
            Return a readable string, positive as before, negitive as after.
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ReadableSpanTo(System.Nullable{System.DateTime},System.DateTime,System.Boolean)">
            <summary>
            Return readable TimeSpan, or DateTime format if over a month.
            </summary>
            <param name="compare">DateTime to be compared</param>
            <param name="dateOnly">Show short date format while span over a month</param>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToFileName(System.DateTime)">
            <summary>
            Return a formatted string suitable as file name
            </summary>
            <param name="datetime"></param>
            <returns>string like 2015-05-29-102733-485</returns>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.Min(System.DateTime,System.DateTime)">
            <summary>
            Return earlier DateTime of 2 DateTimes
            </summary>
            <param name="date1"></param>
            <param name="date2"></param>
            <returns>earlier</returns>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.Max(System.DateTime,System.DateTime)">
            <summary>
            Return later DateTime of 2 DateTimes
            </summary>
            <param name="date1"></param>
            <param name="date2"></param>
            <returns>later</returns>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.Max(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Return null when all are null, return valid one if another is null
            </summary>
            <param name="date1"></param>
            <param name="date2"></param>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.Min(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Return null if anyone is null.
            </summary>
            <param name="date1"></param>
            <param name="date2"></param>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.ToUnixTimeStamp(System.DateTime)">
            <summary>
            Converts a given DateTime into a Unix timestamp
            </summary>
            <param name="value">Any DateTime</param>
            <returns>The given DateTime in Unix timestamp format</returns>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.FromUnixTimeStamp(System.Int64)">
            <summary>
            Convert a Unix timestamp to DateTime
            </summary>
            <param name="value">Unit timestamp</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Emmola.Helpers.DateTimeHelper.LaterOrNow(System.Nullable{System.DateTime})">
            <summary>
            Return itself when is valid and later than DateTime.Now, otherwise return DateTime.Now
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="T:Emmola.Helpers.i18n.Res">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.DAY_AFTER_TOMMORW">
            <summary>
              Looks up a localized string similar to Day after tommorow.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.DAY_BEFORE_YESTERDAY">
            <summary>
              Looks up a localized string similar to Day before yesterday.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.DAYS_AFTER">
            <summary>
              Looks up a localized string similar to After {0} days.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.DAYS_AGO">
            <summary>
              Looks up a localized string similar to {0} days ago.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.False">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.HOURS_AFTER">
            <summary>
              Looks up a localized string similar to After {0} hours.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.HOURS_AGO">
            <summary>
              Looks up a localized string similar to {0} hours ago.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.JUST_NOW">
            <summary>
              Looks up a localized string similar to Just now.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.MINUTES_AFTER">
            <summary>
              Looks up a localized string similar to After {0} minutes.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.MINUTES_AGO">
            <summary>
              Looks up a localized string similar to {0} minutes ago.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.RIGHT_NOW">
            <summary>
              Looks up a localized string similar to Right now.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.TOMMOROW">
            <summary>
              Looks up a localized string similar to Tommorow.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.True">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="P:Emmola.Helpers.i18n.Res.YESTERDAY">
            <summary>
              Looks up a localized string similar to Yesterday.
            </summary>
        </member>
        <member name="T:Emmola.Helpers.Interfaces.ISimilarity`1">
            <summary>
            Able to calcuate similarity to ther
            </summary>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.ToReadable(System.Nullable{System.Decimal},System.String)">
            <summary>
            Return human friendly format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.ToReadable(System.Decimal)">
            <summary>
            Return human friendly format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.ToCapacity(System.Int64)">
            <summary>
            Return a capacity readable string
            </summary>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.ToMoney(System.Decimal)">
            <summary>
            Return a Money format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.ToMoney(System.Nullable{System.Decimal})">
            <summary>
            Return a Money format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.ToReadable(System.Nullable{System.Int32})">
            <summary>
            Return readable format with comma
            </summary>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.ToPercentage(System.Single)">
            <summary>
            Return percentage format.
            </summary>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.ToReadable(System.Nullable{System.Boolean})">
            <summary>
            Return Yes/No if not null.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Emmola.Helpers.NumberHelper.CalculatePages(System.Int64,System.Int64)">
            <summary>
            Calculate pages base on pagesize
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="M:Emmola.Helpers.WebHelper.GetHttpClient(System.String,System.String)">
            <summary>
            Return a HttpClient with Host/Headers setup.
            </summary>
            <param name="host">Host</param>
            <param name="format">Format for both ends</param>
            <returns>HttpClient</returns>
        </member>
        <member name="M:Emmola.Helpers.WebHelper.GetJsonHttpClient(System.String)">
            <summary>
            Return a Json HttpClient
            </summary>
        </member>
        <member name="M:Emmola.Helpers.WebHelper.GetXmlHttpClient(System.String)">
            <summary>
            Return a Xml HttpClient
            </summary>
        </member>
        <member name="M:Emmola.Helpers.WebHelper.ReadAsHtmlAsync(System.Net.Http.HttpContent)">
            <summary>
            Return string base on CHARSET in META tag or WebResponse.ContentType
            </summary>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.Fill``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Fill up array with specified value。 new int[4].Fill(1, 0, 3) => [1, 2, 3, ?];
            </summary>
            <param name="value">Value to fill</param>
            <param name="start">Fill starts from this(included)</param>
            <param name="end">Fill ends before this(excluded)</param>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.Implode``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Shortcut to String.Join
            </summary>
            <param name="separator"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emmola.Helpers.CollectionHelper.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:Emmola.Helpers.CollectionHelper.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)" -->
        <member name="M:Emmola.Helpers.CollectionHelper.AddToValue``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2)">
            <summary>
            Add value to pair.Value
            </summary>
            <param name="key">Pair.Key</param>
            <param name="value">Add to Pair.Value</param>
            <returns></returns>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.FindOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            FirstOrDefault if not found, then create one add to collection then return it;
            </summary>
            <param name="find">FirstOrDefault arg</param>
            <param name="create">Create a new one</param>
            <returns></returns>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.ToQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Return a urlencoded QueryString, support duplicated key
            </summary>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.GetNullabe``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Get Nullable
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Return a urlencoded QueryString
            </summary>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.AnySame``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if any duplicated element in collection
            </summary>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.SimilarityTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculate similarity of two Collection
            </summary>
            <returns>float type similarity between 0 and 1</returns>
        </member>
        <member name="M:Emmola.Helpers.CollectionHelper.FindMostSimilar``1(System.Collections.Generic.IEnumerable{``0},``0,System.Single)">
            <summary>
            Find the most similar to target instance 
            </summary>
            <param name="target">Similar to</param>
            <param name="baseline">Only element's similarity above baseline are examinated</param>
            <returns>Most similar instance in list, return null if all belong baseline</returns>
        </member>
        <member name="M:Emmola.Helpers.EnumHelper.GetMemberInfo(System.Enum)">
            <summary>
            Return its MemberInfo
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Emmola.Helpers.EnumHelper.GetDescription(System.Enum)">
            <summary>
            Return its Description from DisplayAttribute instance
            </summary>
        </member>
        <member name="M:Emmola.Helpers.EnumHelper.ToReadable(System.Enum)">
            <summary>
            Return its DisplayAttribute.Name or DisplayNameAttribute.DisplayName
            </summary>
        </member>
        <member name="M:Emmola.Helpers.ObjectHelper.Dump``1(``0,System.Int32)">
            <summary>
            Return a shallow dump format with type name
            </summary>
        </member>
        <member name="M:Emmola.Helpers.ObjectHelper.Get(System.Object,System.String)">
            <summary>
            Return inst's property value;
            </summary>
        </member>
        <member name="M:Emmola.Helpers.ObjectHelper.Set(System.Object,System.String,System.Object)">
            <summary>
            Set inst's property value;
            </summary>
        </member>
        <member name="M:Emmola.Helpers.ObjectHelper.GetString(System.Object,System.String)">
            <summary>
            Return inst's property value and Convert.ToString
            </summary>
        </member>
        <member name="M:Emmola.Helpers.ObjectHelper.ToReadable(System.Object,System.String)">
            <summary>
            Convert property value of inst to readable format
            DateTime : return DATE/TIME format when DataTypeAttribute serve
            Decimal: return ToMoney when DataTypeAttribute.DataType == DataType.Currency
            IEnumerable: return string.JOIN(", ", value);
            </summary>
            <param name="inst">Instance</param>
            <param name="name">Property Name</param>
        </member>
        <member name="M:Emmola.Helpers.ObjectHelper.ToNullable``1(System.Object)">
            <summary>
            Similar to JavaScript logic, 0, "", null, "False" are threated false
            </summary>
        </member>
        <member name="M:Emmola.Helpers.ObjectHelper.ToQueryString(System.Object,System.Boolean)">
            <summary>
            Convert anomynous object to QueryString format
            </summary>
            <param name="inst"></param>
            <returns></returns>
        </member>
        <member name="M:Emmola.Helpers.ObjectHelper.ToBinary(System.Object)">
            <summary>
            Convert an object to byte[]
            </summary>
            <param name="inst">object to be converted</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.DigestMD5(System.String)">
            <summary>
            Return its MD5 digest text
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.DigestSHA1(System.String)">
            <summary>
            Return its SHA1 digest text
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.RandomText(System.Int32,System.Byte,System.Byte)">
            <summary>
            Generate specified legnth of random characters
            </summary>
            <param name="length">Length</param>
            <param name="start">Start</param>
            <param name="end">End</param>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.RandomDigits(System.Int32)">
            <summary>
            Generate specified legnth of Digits [0-9]
            </summary>
            <param name="length">Length</param>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.RandomLetters(System.Int32)">
            <summary>
            Generate specified legnth of Letters [A-Za-z]
            </summary>
            <param name="length">Length</param>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.RandomCaptcha(System.Int32)">
            <summary>
            Generate specifed captcha code [A-Z0-9]
            </summary>
            <param name="length">Length</param>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.ToHexString(System.Byte[])">
            <summary>
            Convert Hashed byte[] to Hex String
            </summary>
            <param name="bytes">Hashed byte[]</param>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.IsEmpty(System.String)">
            <summary>
            Check if equals to String.Empty
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.IsNull(System.String)">
            <summary>
            Check if is null
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.IsValid(System.String)">
            <summary>
            Check if is valid string, not null not empty.
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.Repeat(System.String,System.Int32)">
            <summary>
            Return itself repeated in specified times: "a".Repeat(3) = "aaa";
            </summary>
            <param name="times">How many times to repeat</param>
        </member>
        <member name="F:Emmola.Helpers.StringHelper._textInfo">
            <summary>
            Return Title Case Format "foo bar".ToTitleCase() = "Foo Bar"
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.Ellipsis(System.String,System.Int32)">
            <summary>
            Return a truncated string ends with "…" when its length exceeds specified length
            Otherwise return itself only.
            </summary>
            <param name="length">Max Length</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emmola.Helpers.StringHelper.Cut(System.String,System.Int32)" -->
        <member name="M:Emmola.Helpers.StringHelper.OrDefault(System.String,System.String,System.Object[])">
            <summary>
            Return defaultValue while itself is not valid
            </summary>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.Mask(System.String,System.Char)">
            <summary>
            Return a masked string, useful for Email/Phone masking
            </summary>
            <param name="mask">Mask character</param>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.IsDigitOnly(System.String)">
            <summary>
            Check if it's valid and consist by digits only
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.AppendTabbedLine(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            Append a newline and insert specified length of tabs in the beginning, then append text and args as String.Format
            </summary>
            <param name="tabs">How many tabs to be inserted</param>
            <param name="text">Text to append</param>
            <param name="args">Supply args when text is FORMAT</param>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.AppendSpaced(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            Append specified length of space before text.
            </summary>
            <param name="length">Length of Spaces</param>
            <param name="text">Text to append</param>
            <param name="args">Format args</param>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.AppendSpaced(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Shortcut to .AppendSpaced(1, text, args);
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.AllValid(System.String[])">
            <summary>
            Return all valid string as a new string[]
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.IcEquals(System.String,System.String)">
            <summary>
            Shortcut of String.Equals InvariantCultureIgnoreCase
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.FormatMe(System.String,System.Object[])">
            <summary>
            Shortcut of String.Format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.StringHelper.ToHtmlString(System.String)">
            <summary>
            Return as Html Format
            </summary>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.IsSimpleType(System.Type)">
            <summary>
            Check if type is simple type, such as value type, string, enum, decimal。
            </summary>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.FindSubTypes(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean,System.String)">
            <summary>
            Return all SubTypes in specified Assemblies
            </summary>
            <param name="assemblies">Assemblies to search</param>
            <param name="concreateOnly">Concreate type only</param>
            <param name="nameSpace">Search with in specifed namespace</param>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.FindSubTypes(System.Type,System.Boolean,System.String)">
            <summary>
            Return all SubTypes in current AppDomain
            </summary>
            <param name="concreateOnly">Concreate type only</param>
            <param name="nameSpace">Search with in specifed namespace</param>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.FindSubTypesInMe(System.Type,System.Boolean,System.String)">
            <summary>
            Return all SubTypes in calling Assembly
            </summary>
            <param name="concreateOnly">Concreate type only</param>
            <param name="nameSpace">Search with in specifed namespace</param>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.IsEnumerable(System.Type)">
            <summary>
            Check if is IEnumerable, including Array, GenericIEnumerable but NOT string!
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emmola.Helpers.TypeHelper.IsNullableType(System.Type)" -->
        <member name="M:Emmola.Helpers.TypeHelper.GetNullableValueType(System.Type)">
            <summary>
            Return Nullable value type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emmola.Helpers.TypeHelper.GetElementTypeExt(System.Type)" -->
        <member name="M:Emmola.Helpers.TypeHelper.HasAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Check if contains a specified Attribute
            </summary>
            <param name="attributeType">Type of Attribute to find</param>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            HasAttribute Generic Version
            </summary>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Return specified Attribute Type instance
            </summary>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.IfAttribute``1(System.Reflection.MemberInfo,System.Action{``0},System.Boolean)">
            <summary>
            Run action if Attribute exists
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emmola.Helpers.TypeHelper.AnyPropertyUsing(System.Type,System.Type,System.Boolean)" -->
        <member name="M:Emmola.Helpers.TypeHelper.GetPublicProperties(System.Type)">
            <summary>
            Return all public Properties 
            </summary>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.GetReadWriteProperties(System.Type)">
            <summary>
            Return all public Properties 
            </summary>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.GetDisplayAttr(System.Reflection.MemberInfo)">
            <summary>
            Return its DisplayAttribute instance;
            </summary>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.GetDisplayNameAttr(System.Reflection.MemberInfo)">
            <summary>
            Return its DisplayNameAttribute instance;
            </summary>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.GetName(System.Reflection.MemberInfo,System.String)">
            <summary>
            Return DisplayAttribute.Name or DisplayNameAttribute.DisplayName
            </summary>
            <param name="defaultName">In case none of them is found, and will fallback to TypeName if no defaultName given</param>
            <returns></returns>
        </member>
        <member name="M:Emmola.Helpers.TypeHelper.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            Return its Description from DisplayAttribute instance, return null when none is defined
            </summary>
        </member>
    </members>
</doc>
